// <auto-generated />
using System;
using CheckoutService.Model.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CheckoutService.Migrations
{
    [DbContext(typeof(CheckoutContext))]
    partial class CheckoutContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CheckoutService.Model.Database.Types.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer")
                        .HasColumnName("order_status");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_orders_payment_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("CheckoutService.Model.Database.Types.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreditCardExpirationDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("credit_card_expiration_date");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("credit_card_number");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pin");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("CheckoutService.Model.Database.Types.Order", b =>
                {
                    b.HasOne("CheckoutService.Model.Database.Types.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_orders_payments_payment_id");

                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
